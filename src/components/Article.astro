---
import type { Blog } from "lib/microcms";
import { dateToString, compareDate } from "lib/util";

export interface Props {
    blog: Blog;
    showTitle?: boolean;
    limitHeight?: boolean;
}

const { blog, showTitle, limitHeight } = Astro.props;
const fields: { k: string; v: Date }[] = (() => {
    const dates = Object.entries(blog)
        .map(([k, v]) => ({ k, v: new Date(Date.parse(v)) }))
        .filter(({ k, v }) => k.match(/At$/) && !!v.getDate());
    return [...new Set(dates.map(({ v }) => v.getTime()))]
        .map((time) => dates.find(({ v }) => v.getTime() === time))
        .filter((v) => !!v);
})();
---

<article>
    <div class={limitHeight ? "limit-height" : ""}>
        {
            showTitle ? (
                <div class="article-title">
                    <h3 style="margin-top: 0px;">{blog.title}</h3>
                </div>
            ) : (
                ""
            )
        }
        <div class="article-info">
            <table>
                <tbody>
                    {
                        fields
                            .sort((a, b) => compareDate(a.v, b.v))
                            .map((e) => (
                                <tr class="field">
                                    <td>{e.k}:</td>
                                    <td>{dateToString(e.v)}</td>
                                </tr>
                            ))
                    }
                </tbody>
            </table>
        </div>
        <div set:html={blog.content} />
    </div>
    <slot />
</article>

<style>
    article {
        margin-bottom: 30px;
        padding: 5px;
    }

    div.article-title > h3 {
        margin-bottom: 0;
    }

    .article-info {
        width: 100%;
        display: flex;
    }

    tr.field {
        color: gray;
        font-size: smaller;
    }

    .limit-height {
        overflow: hidden;
        max-height: 500px;
        position: relative;
    }

    .limit-height:before {
        content: "";
        position: absolute;
        border-style: none;
        left: 0;
        bottom: 0;
        z-index: 2;
        width: 100%;
        height: 120px;
        background: linear-gradient(
            rgba(255, 255, 255, 0) 0,
            var(--bgcolor) 100px
        );
    }
</style>
